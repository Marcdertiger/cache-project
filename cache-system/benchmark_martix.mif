-- Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
-- Your use of Altera Corporation's design tools; logic functions 
-- and other software and tools; and its AMPP partner logic 
-- functions; and any output files from any of the foregoing 
-- (including device programming or simulation files); and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement; the Altera Quartus II License Agreement;
-- the Altera MegaCore Function License Agreement; or other 
-- applicable license agreement; including; without limitation; 
-- that your use is for the sole purpose of programming logic 
-- devices manufactured by Altera and sold by Altera or its 
-- authorized distributors.  Please refer to the applicable 
-- agreement for further details.

-- Quartus II generated Memory Initialization File (.mif)

WIDTH=16;
DEPTH=4096;

ADDRESS_RADIX=UNS;
DATA_RADIX=HEX;

CONTENT BEGIN

	0 : 3002;	   		-- R0 <- #2			-> x(2)=2
	1 : 3101;			-- R1 <- #1			-> to increment by 1 and y(0) - 1
	2 : 3203;			-- R2 <- #3			-> y(1) = 3
	3 : 3352;			-- R3 <- #40		-> pointer to mem. location of 1st calculated coeff.
	4 : 3401;			-- R4 <- #1			-> to increment by 1
	5 : 1150;			-- M[50] <- R1 		-> M[50]=1
	6 : 1251;			-- M[51] <- R2 		-> M[51]=3
	7 : 1070;			-- M[70] <- R0		-> temp storage of x(n)
	8 : 0570;       	-- R5<- M[70]    	-> R5=R0
	9 : 4500;			-- R5<- R5+R0		-> R5=2*R0  (2x)
	10 : 4520;			-- R5<- R5+R2		-> R5=R5+R2  (2x+y(n-1))
	11 : 5510;			-- R5<- R5-R1		-> R5=R5-R1  (2x+y(n-1)-y(n-2))
	12 : 2350;			-- M[R3]<-R5		-> M[R3] = y(n)
	13 : 4340;			-- R3<-R3+R4		-> R3=R3+1
	14 : 1271;			-- M[71] <- R2		-> temp storage of x(n)
	15 : 1572;			-- M[72] <- R5		-> temp storage of x(n)
	16 : 0171;			-- R1<- M[71]    	-> R1=y(n-2)
	17 : 0272;			-- R2<- M[72]    	-> R2=y(n-1)
	18 : 4040;			-- R0<- R0+R4		-> R0=R0+1   (x(n+1))
	19 : 065E;			-- R6 <- M[5E]		-> R6<- M[5E]   (y(14))
	20 : 6607;  		-- R6=0: PC<- #7 	->loop if R6=0	

	21 : 7040;			-- output<- M[40]   mov obuf_out;M[40]
	22 : 7041;			-- output<- M[41]   mov obuf_out;M[41]
	23 : 7042;			-- output<- M[42]   mov obuf_out;M[42]
	24 : 7043;			-- output<- M[43]   mov obuf_out;M[43]
	25 : 7044;			-- output<- M[44]   mov obuf_out;M[44]
	26 : 7044;			-- output<- M[44]   mov obuf_out;M[44]
	27 : 7046;			-- output<- M[46]   mov obuf_out;M[46]
	28 : 7047;			-- output<- M[47]   mov obuf_out;M[47]
	29 : 7048;			-- output<- M[48]   mov obuf_out;M[48]
	36 : F000;			-- halt
	
	37 : 0;
	38 : 0;
	39 : 0;
	
	40 : 11;
	41 : 12;
	42 : 13;
	43 : 14;
	44 : 15;
	45 : 16;
	46 : 17;
	47 : 18;
	48 : 19;
	
	49 : 0;
	
	50 : 11;
	51 : 12;
	52 : 13;
	53 : 14;
	54 : 15;
	55 : 16;
	56 : 17;
	57 : 18;
	58 : 19;
	
	[59..4095]  :   0;
END;
