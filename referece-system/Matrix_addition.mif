

-- Addition of two 5x5 matrices


-- matrix addition. result found in memory location mem[70]..mem[94]
--		(starts adding from top left corner then goes top-down following the columns)


WIDTH=16;
DEPTH=4096;

ADDRESS_RADIX=UNS;
DATA_RADIX=HEX;

CONTENT 
BEGIN

		
		-- space for program mem[0..49]
		
0 :   3019;		-- R0 = 25   (Start-up value of program counter)
1 :   3132;		-- R1 = 50	 (position of first element of matrix a)
2 :   324B;		-- R2 = 75	 (position of first element of matrix b)
3 :   3301;		-- R3 = 1	 (constant 1)
4 :   3464;		-- R4 = 100	(position of first element of matrix c (result matrix))

--5:   112D;		-- M[45] <- R0 (M[45] is the position of matrix 0 pointer)				M[45]=50
--6:   1242E;		-- M[46] <- R1 (M[46] is the position of matrix 1 pointer)				M[46]=75
--7:   102F;		-- M[45] <- R0 (M[47] is the program counter, loop exits at 25 runs)	M[47]=0

--loop beginning
	5:  8160;		-- R6    <- M[R1] (matrix 0 current element copied in R6)
	6:  8270;		-- R7    <- M[R2] (matrix 0 current element copied in R7)
	7:  4678;		-- R6    <- R6 + R7
	8:  2460;		-- M[R4] <- R6 (R4 is matrix c pointer location)


	--increment pointers
	9:   5030;		-- decrement program counter
	10:  4131;		-- increment matrix a pointer
	11:  4232;		-- increment matrix b pointer
	12:  4434;		-- increment matrix c pointer
	13:  600E;		-- jump to mem[14]]if register 0 = 0
	14:  9005;		-- jump back to instruction 5
--loop end


-- output some values to show code works as intended (delete for simulation)
	

	
	
	15:	7064;
	16: 7065;
	17: 7066;
	18: 7067;
	19: 7068;
	20: 7069;
	21: 706a;
	22: 706b;
	23: 706c;
	24: 706d;
	25: 706e;
	26: 706f;
	27: 7070;
	28: 7071;
	29: 7072;
	30: 7073;
	31: 7074;
	32: 7075;
	33: 7076;
	34: 7077;
	35: 7078;
	36: 7079;
	37: 707a;
	38: 707b;
	39: 707c;



40:  F000;		-- HALT



[41..49]  :   0;






--matrix a (columns created from left to right)(items in columnss are created top to bottom)

--column 0 

50 :  0001;			-- Mem[50] = 0001
51 :  0002;			-- Mem[51] = 0001
52 :  0003;			-- Mem[52] = 0001
53 :  0004;			-- Mem[53] = 0001
54 :  0005;			-- Mem[54] = 0001

--column 1

55 :  0006;			-- Mem[55] = 0001
56 :  0007;			-- Mem[56] = 0001
57 :  0008;			-- Mem[57] = 0001
58 :  0009;			-- Mem[58] = 0001
59 :  000a;			-- Mem[59] = 0001

--column 2

60 :  000b;			-- Mem[60] = 0001
61 :  000c;			-- Mem[61] = 0001
62 :  000d;			-- Mem[62] = 0001
63 :  000e;			-- Mem[63] = 0001
64 :  000f;			-- Mem[64] = 0001

--column 3

65 :  0010;			-- Mem[65] = 0001
66 :  0011;			-- Mem[66] = 0001
67 :  0012;			-- Mem[67] = 0001
68 :  0013;			-- Mem[68] = 0001
69 :  0014;			-- Mem[69] = 0001

--column 4

70 :  0015;			-- Mem[70] = 0001
71 :  0016;			-- Mem[71] = 0001
72 :  0017;			-- Mem[72] = 0001
73 :  0018;			-- Mem[73] = 0001
74 :  0019;			-- Mem[74] = 0001



--matrix b (columns created from left to right)(items in colums are created top to bottom)

--column 0 

75:   0101;			-- Mem[75] = 0001
76 :  0201;			-- Mem[76] = 0001
77 :  0301;			-- Mem[77] = 0001
78 :  0401;			-- Mem[78] = 0001
79 :  0501;			-- Mem[79] = 0001

--column 1

80 :  0101;			-- Mem[80] = 0001
81 :  0201;			-- Mem[81] = 0001
82 :  0301;			-- Mem[82] = 0001
83 :  0401;			-- Mem[83] = 0001
84 :  0501;			-- Mem[84] = 0001

--column 2

85 :  0601;			-- Mem[85] = 0001
86 :  0701;			-- Mem[86] = 0001
87 :  0801;			-- Mem[87] = 0001
88 :  0901;			-- Mem[88] = 0001
89 :  0a01;			-- Mem[89] = 0001

--column 3

90 :  0001;			-- Mem[90] = 0001
91 :  0101;			-- Mem[91] = 0001
92 :  0201;			-- Mem[92] = 0001
93 :  0301;			-- Mem[93] = 0001
94 :  0401;			-- Mem[94] = 0001

--column 4

95 :  0501;			-- Mem[95] = 0001
96 :  0601;			-- Mem[96] = 0001
97 :  0701;			-- Mem[97] = 0001
98 :  0801;			-- Mem[98] = 0001
99 :  0901;			-- Mem[99] = 0001

	[100..4095]  :   0;
END;



